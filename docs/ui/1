# UI Improvement Prompt for Vue 3 + PrimeVue 4 (Styled Mode)

## Objective
Enhance the user interface of a Vue 3 application utilizing PrimeVue 4.x in **styled mode** with the **Aura theme**. Focus on modern component usage and layout best practices.

## Core PrimeVue 4.x Setup (Styled Mode)
Ensure the project adheres to the following PrimeVue 4.x configuration for theming:

-   **Styled Mode with Presets**: PrimeVue 4 uses theme presets, not direct CSS file imports for themes.
-   **Correct Import**: Use the `@primevue/themes` package for presets.

    ```typescript
    // Example in src/main.ts
    import { createApp } from 'vue';
    import PrimeVue from 'primevue/config';
    import Aura from '@primevue/themes/aura'; // Correct theme preset import
    import App from './App.vue';

    const app = createApp(App);

    app.use(PrimeVue, {
      theme: {
        preset: Aura,
        options: {
          // Optional: Add prefix, dark mode, etc.
          // prefix: 'p',
          // darkModeSelector: '.dark-mode'
        }
      }
    });

    app.mount('#app');
    ```
-   **Icon Import**: PrimeIcons should be imported directly if not already globally available.
    ```typescript
    // Example in src/main.ts (if not already handled by PrimeVue setup)
    import 'primeicons/primeicons.css';
    ```

## UI Enhancement Goals

1.  **Modern Layout**: Implement a clean, readable, and responsive layout using PrimeVue 4 components and PrimeFlex.
2.  **Component Usage**: Leverage appropriate PrimeVue components such as:
    *   `Card`: For grouping related content.
    *   `Divider`: For separating sections.
    *   `Accordion` or `TabView`: For managing collapsible content or tabbed interfaces.
    *   `DataTable`: For displaying tabular data.
    *   `Button`: With appropriate severity and icons.
    *   `Tag`: For status indicators, using severity.
    *   `Tooltip`: (`v-tooltip`) For providing contextual help.
    *   `Toast`: For non-intrusive notifications.
    *   `Dialog`: For modal interactions.
3.  **PrimeFlex Integration**: Utilize PrimeFlex utility classes for:
    *   Grid system (`p-grid`, `p-col-*`).
    *   Spacing (e.g., `p-m-2`, `p-p-3`).
    *   Flexbox utilities for alignment and distribution.
    *   Responsive design (`p-d-none`, `p-d-md-block`, etc.).
4.  **Visual Differentiation**: Apply `severity` properties to `Button`, `Tag`, and other relevant components (e.g., `p-button-primary`, `p-tag-success`) to convey meaning and importance.
5.  **Contextual Information**: Use `v-tooltip` directive on input fields, buttons, or icons where additional information can enhance usability.

## Constraints
-   **No Business Logic Changes**: Modifications should be limited to UI structure, component choices, and styling within the PrimeVue 4 framework.
-   **Adherence to PrimeVue 4 Styled Mode**: All UI changes must be compatible with the styled mode and Aura theme preset. Avoid legacy CSS theme file references or custom CSS that conflicts with the theme system.
Checklist:

Extract explicit requirements.

Map to frontend data models & components.

Verify existing backend coverage vs gaps.

Define endpoint contracts (present / missing).

Specify user flows (PRE → POST → block feedback).

Validation & edge cases.

Implementation sequence & feature flags.

Requirements (condensed)

Auth + role (basic already).
Minimum 10 cases per reader.
Study arms: HUMAN, HUMAN_AI; POST phase only if HUMAN_AI.
PRE inputs: top-3 ranked diagnoses (1 required, 2/3 optional), diagnostic confidence (1–5), biopsy yes/no, referral yes/no, management certainty (1–5).
POST: show AI top-3 suggestions; user chooses No change vs Update; if Update: can modify all PRE inputs; track was_updated.
Gamify every 10 cases: show block stats (Top-1/Top-3 pre vs post, peer percentiles).
Autofill diagnosis text with mapping pipeline (progressively enriched suggestions).
Remove management notes & case metadata editing.
Display case analytics (malignancy flag, superclass) if present.
Free-text mapping pipeline stages (exact/prefix/subtext → synonym/alias/abbrev → fuzzy).
Confidence deltas & management change tracking.
Optional description prompts to encourage decision re-evaluation.
Frontend Data Models (TS) interface Case { id:number; ground_truth_diagnosis_id?:number; malignancy_flag?:boolean; superclass?:string; source_dataset?:string; } interface Image { id:number; case_id:number; image_url:string; } interface DiagnosisSuggestion { rank:1|2|3; name:string; confidence_score:number; prediction_id:number; } interface DiagnosisEntry { rank:1|2|3; raw_text:string; diagnosis_term_id?:number; mapping_method?:string; mapping_confidence?:number; } interface AssessmentBase { user_id:number; case_id:number; is_post_ai:boolean; phase?:'PRE'|'POST'; diagnostic_confidence:number; biopsy_recommended:boolean; referral_recommended:boolean; management_confidence:number; was_updated?:boolean; ai_suggestions_json?:DiagnosisSuggestion[]; diagnoses?:DiagnosisEntry[]; } interface BlockFeedback { block_index:number; top1_accuracy_pre?:number; top1_accuracy_post?:number; top3_accuracy_pre?:number; top3_accuracy_post?:number; peer_percentile_top1?:number; peer_percentile_top3?:number; delta_top1?:number; delta_top3?:number; } interface ReaderCaseAssignment { id:number; user_id:number; case_id:number; arm:'HUMAN'|'HUMAN_AI'; display_order?:number; block_index?:number; }

Component Map

CaseQueue / AssignmentList (fetch assignments).
CaseWorkspace:
ImageGallery
DiagnosisRankedList (editable PRE, conditional POST)
DiagnosticConfidencePicker (1–5)
ManagementBinaryChoices (biopsy/referral)
ManagementConfidencePicker (1–5)
AISuggestionsPanel (POST only if arm HUMAN_AI)
ChangeSummaryPrompt (POST: No change vs Update)
BlockFeedbackPanel (appears after each block of 10).
DiagnosisAutocomplete (search + progressive hint badges for mapping method).
ProgressBar (cases completed / remaining).
PeerComparisonBadges (in feedback panel).
Backend Coverage vs Gaps Covered now:
/api/cases, /api/images, /api/assessments, /api/ai_outputs, /api/diagnosis_terms, /api/management_strategies, auth. Added but endpoints likely missing (need to confirm/create):
ReaderCaseAssignment CRUD/read (queue).
DiagnosisEntry CRUD/batch replace for an assessment (instead of legacy diagnoses).
BlockFeedback retrieval (and creation trigger).
Diagnosis synonym search or fuzzy endpoint (currently only exact name list; need /api/diagnosis_terms/search?q= to support prefix/subtext/fuzzy stages).
Stats endpoints (optional) if block computations not done client-side.
Suggested Endpoint Contracts (proposed if missing) GET /api/assignments/me -> List[ReaderCaseAssignment] (ordered) POST /api/assessments/ { payload } -> Assessment (handles PRE or POST based on is_post_ai) PUT /api/assessments/{user_id}/{case_id}/{is_post_ai} (for update) GET /api/diagnosis_entries/{user_id}/{case_id}/{is_post_ai} PUT /api/diagnosis_entries/{user_id}/{case_id}/{is_post_ai} (replace list of up to 3 entries atomically) GET /api/block_feedback/{block_index} (auto-create server-side if absent; returns BlockFeedback) GET /api/diagnosis_terms/search?q=foo&limit=10 (returns matches with method + confidence hints) Optional: GET /api/metrics/summary?case_id= / user-level analytics for future dashboard.

User Flows Flow PRE (HUMAN or HUMAN_AI):

Fetch assignment (case + arm).

Load case & images.

User enters 1–3 diagnoses (enforce rank uniqueness, #1 required).

Select confidence (1–5).

Choose biopsy/referral; management confidence.

Submit assessment (is_post_ai=false). Flow POST (HUMAN_AI only):

Fetch AI suggestions (/ai_outputs or from assessment.ai_suggestions_json).

Show PRE locked snapshot side-by-side.

Prompt: Keep or Update.

If Keep: POST assessment created with copied values, was_updated=false.

If Update: Editable controls; was_updated derived client-side (difference) & sent.

Save (is_post_ai=true). Block Feedback:

After N completed cases where (completed_count % 10 == 0): call /block_feedback/{block_index}.
Render accuracies, deltas, peer percentiles (if available), continue button.
Validation / Edge Cases
Must prevent POST before PRE exists.
Rank uniqueness & no blank rank1.
Autocomplete suggestions should not duplicate existing entries (case-insensitive).
Handle absent AI suggestions gracefully (fallback notice).
Offline mapping might return NONE; display raw text badge.
If user refreshes mid POST, reload PRE + check if POST exists; resume editing or read-only if already saved.
Block feedback: if peer stats unavailable show placeholders.
Implementation Sequence (frontend)

Central axios client + auth store update to /api/auth.

Assignment queue + navigation guard (redirect to next incomplete case).

PRE assessment form (DiagnosisRankedList + confidence + management choices).

AI suggestions + POST workflow (HUMAN_AI).

Integrate was_updated diff logic (compare serialized PRE vs POST payload).

Block feedback panel + trigger logic.

Diagnosis autocomplete pipeline (start with simple GET /diagnosis_terms?; add search endpoint when backend ready).

Replace legacy diagnoses endpoint with diagnosis_entries feature flag.

Add analytic fields display & remove deprecated UI (notes/meta).

Add tests: component unit + minimal e2e (happy path PRE/POST, block boundary).

Feature Flags

useDiagnosisEntries (default false until backend endpoints stable).
enableBlockFeedback (toggle while backend metrics finalize).
enableFuzzySearch (progressively introduce advanced search endpoint).
Required Backend Follow-ups (if not already)
Expose assignments, diagnosis_entries, block_feedback endpoints.
Provide mapping API for autocomplete (with method labels).
Add server-side was_updated calculation fallback (optional).
Ensure assessment response includes ai_suggestions_json if available.
Frontend Payload Examples POST /api/assessments (PRE) { "user_id":1,"case_id":42,"is_post_ai":false,"diagnostic_confidence":4,"biopsy_recommended":false,"referral_recommended":true,"management_confidence":3,"diagnoses":[{"rank":1,"raw_text":"tinea corporis"},{"rank":2,"raw_text":"eczema"}] } POST /api/assessments (POST update) { "user_id":1,"case_id":42,"is_post_ai":true,"diagnostic_confidence":5,"biopsy_recommended":false,"referral_recommended":false,"management_confidence":4,"was_updated":true,"diagnoses":[{"rank":1,"raw_text":"tinea corporis"},{"rank":2,"raw_text":"psoriasis"}] }

Mapping Pipeline UI Indicators

EXACT/prefix/subtext: green tag.
SYNONYM/ALIAS/ABBREVIATION: blue tag.
FUZZY: orange tag (show confidence %).
NONE: gray tag.
Testing Focus
Rank enforcement logic.
Diff detection (was_updated).
Block boundary logic.
Autocomplete caching and debounce.
Fallback when search endpoint absent.
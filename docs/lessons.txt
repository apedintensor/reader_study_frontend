
# üìö Lessons Learned: Vue 3 + Vite + PrimeVue Project Setup

## üéØ Project Context
Based on our experience building the AI-Assisted Skin Diagnosis Reader Study Platform with Vue 3, Vite, PrimeVue 4.x, and other modern frontend technologies.

## üö® Critical Pitfalls & Solutions

### 1. PrimeVue 4.x Theme Configuration
**‚ö†Ô∏è MAJOR PITFALL**: PrimeVue 4.x completely changed its theming system

**Problem**: 
- Traditional CSS theme imports (`primevue/resources/themes/saga-blue/theme.css`) no longer work
- Documentation examples for older versions cause runtime errors
- Missing or incorrect theme configuration results in invisible UI elements

**‚úÖ Solution**:
```typescript
// main.ts - Correct PrimeVue 4.x setup
import { createApp } from 'vue';
import PrimeVue from 'primevue/config';
import Aura from '@primevue/themes/aura'; // Use built-in themes
import 'primeicons/primeicons.css'; // Only icons CSS needed

const app = createApp(App);

app.use(PrimeVue, {
  theme: {
    preset: Aura,
    options: {
      prefix: 'p',
      darkModeSelector: '.p-dark',
      cssLayer: false
    }
  }
});
```

**Key Changes in v4.x**:
- Use `@primevue/themes` package for themes
- No manual CSS imports for themes
- Configuration through `theme.preset` option
- Built-in support for dark mode

### 2. TypeScript Type Import Errors
**‚ö†Ô∏è PITFALL**: Runtime errors when importing TypeScript types alongside runtime imports

**Problem**:
```typescript
// WRONG - Causes runtime bundle errors
import { RouteRecordRaw, createRouter } from 'vue-router';
```

**‚úÖ Solution**:
```typescript
// CORRECT - Separate type and runtime imports
import type { RouteRecordRaw } from 'vue-router';
import { createRouter } from 'vue-router';
```

**Why This Matters**:
- Type imports should not appear in JavaScript bundles
- Mixing imports causes Vite build errors
- Production builds fail silently in some cases

### 3. CSS Variables and Component Styling Issues
**‚ö†Ô∏è PITFALL**: Inconsistent styling and text visibility problems

**Problem**:
- Default component styling doesn't work across all themes
- Text colors not properly defined for light/dark mode
- Nested component styling doesn't inherit correctly

**‚úÖ Solution**:
```css
/* style.css - Root level CSS variables */
:root {
  --primary-color: #3B82F6;
  --surface-card: #ffffff;
  --text-color: #1f2937;
  --text-color-secondary: #6b7280;
}

/* Dark mode variables */
.p-dark {
  --surface-card: #1f2937;
  --text-color: #f9fafb;
  --text-color-secondary: #d1d5db;
}

/* Component-specific styling */
.p-card {
  background: var(--surface-card);
  color: var(--text-color);
}

/* Deep selector for nested components */
:deep(.p-menubar) {
  background: var(--surface-card);
  border: 1px solid var(--surface-border);
}
```

### 4. Cypress Configuration Issues
**‚ö†Ô∏è PITFALL**: Cypress config file type errors in newer versions

**Problem**:
```
Error: Cannot use import statement outside a module
```

**‚úÖ Solution**:
```bash
# Rename config file to explicitly mark as CommonJS
mv cypress.config.js cypress.config.cjs
```

**Alternative Solution**:
```typescript
// cypress.config.ts - Use TypeScript config
import { defineConfig } from 'cypress';

export default defineConfig({
  e2e: {
    setupNodeEvents(on, config) {
      // implement node event listeners here
    },
    baseUrl: 'http://localhost:5173',
    supportFile: 'cypress/support/e2e.ts'
  },
});
```

### 5. API Proxy Configuration Errors
**‚ö†Ô∏è PITFALL**: Incorrect Vite proxy setup causing 404 errors

**Problem**:
```typescript
// WRONG - Proxy not configured correctly
export default defineConfig({
  server: {
    proxy: {
      '/api': 'http://localhost:8000' // Missing rewrite rule
    }
  }
});
```

**‚úÖ Solution**:
```typescript
// CORRECT - Proper proxy with path rewriting
export default defineConfig({
  server: {
    proxy: {
      '/api': {
        target: 'http://localhost:8000',
        changeOrigin: true,
        rewrite: (path) => path.replace(/^\/api/, '')
      }
    }
  }
});
```

### 6. Vue Router and State Management Integration
**‚ö†Ô∏è PITFALL**: Race conditions between router navigation and store initialization

**Problem**:
- Router guards executing before stores are initialized
- Authentication state not available during initial navigation
- Page refreshes causing authentication loops

**‚úÖ Solution**:
```typescript
// router/index.ts - Proper async guard setup
router.beforeEach(async (to, from, next) => {
  const userStore = useUserStore();
  
  // Ensure store is initialized
  if (!userStore.isInitialized) {
    await userStore.initialize();
  }
  
  if (to.meta.requiresAuth && !userStore.isAuthenticated) {
    next({ name: 'login' });
  } else {
    next();
  }
});
```

## üîß Development Environment Setup

### Recommended Folder Creation (Windows)
```powershell
# Use PowerShell for reliable directory creation
New-Item -ItemType Directory -Path "src\components" -Force
New-Item -ItemType Directory -Path "src\pages" -Force
New-Item -ItemType Directory -Path "src\stores" -Force
New-Item -ItemType Directory -Path "src\router" -Force
```

### Essential VSCode Extensions
```json
{
  "recommendations": [
    "Vue.volar",
    "Vue.vscode-typescript-vue-plugin",
    "bradlc.vscode-tailwindcss",
    "ms-vscode.vscode-typescript-next"
  ]
}
```

## üì¶ Dependency Version Compatibility

### Working Configuration (Tested)
```json
{
  "dependencies": {
    "vue": "^3.4.0",
    "primevue": "^4.0.0",
    "@primevue/themes": "^4.0.0",
    "primeicons": "^7.0.0",
    "pinia": "^2.1.0",
    "vue-router": "^4.3.0",
    "axios": "^1.6.0"
  },
  "devDependencies": {
    "@vitejs/plugin-vue": "^5.0.0",
    "vite": "^5.0.0",
    "typescript": "^5.2.0",
    "cypress": "^13.0.0"
  }
}
```

### Version Compatibility Notes
- **PrimeVue 4.x**: Requires `@primevue/themes` package
- **Vue 3.4+**: Better TypeScript support and performance
- **Vite 5.x**: Improved build performance and plugin ecosystem
- **Cypress 13.x**: Better TypeScript support and modern browser compatibility

## üö¶ Same-Origin Policy Considerations

### Development vs Production
```typescript
// Development - Use proxy
const apiClient = axios.create({
  baseURL: '/api', // Proxied to backend
});

// Production - Direct API calls or proper CORS setup
const apiClient = axios.create({
  baseURL: process.env.NODE_ENV === 'production' 
    ? 'https://api.yourdomain.com' 
    : '/api',
});
```

## üß™ Testing Best Practices

### Cypress E2E Testing
```typescript
// cypress/support/commands.ts
declare global {
  namespace Cypress {
    interface Chainable {
      loginUser(email: string, password: string): Chainable<void>;
      fillAssessmentForm(data: AssessmentData): Chainable<void>;
    }
  }
}

Cypress.Commands.add('loginUser', (email: string, password: string) => {
  cy.request({
    method: 'POST',
    url: '/api/auth/jwt/login',
    form: true,
    body: { username: email, password: password }
  }).then((response) => {
    window.localStorage.setItem('access_token', response.body.access_token);
  });
});
```

## üìà Performance Optimization Lessons

### Bundle Size Management
```typescript
// vite.config.ts - Bundle analysis
export default defineConfig({
  build: {
    rollupOptions: {
      output: {
        manualChunks: {
          'primevue': ['primevue'],
          'router': ['vue-router'],
          'stores': ['pinia']
        }
      }
    }
  }
});
```

### Lazy Loading Implementation
```typescript
// router/index.ts - Route-based code splitting
const routes = [
  {
    path: '/dashboard',
    name: 'dashboard',
    component: () => import('../pages/DashboardPage.vue')
  }
];
```

## üîÆ Future-Proofing Recommendations

### Technology Choices
1. **TypeScript**: Essential for large projects and team collaboration
2. **Composition API**: Better than Options API for complex state logic
3. **Pinia**: More intuitive than Vuex, better TypeScript support
4. **PrimeVue**: Comprehensive component library with good accessibility
5. **Vite**: Superior to webpack for Vue projects

### Architecture Patterns
- **Feature-based folder structure** over type-based
- **Composables** for shared reactive logic
- **Type-first development** with comprehensive interfaces
- **API abstraction layers** for better maintainability

## üìù Documentation Standards

### Code Documentation
```typescript
/**
 * Submits assessment data to the backend API
 * @param assessmentData - The assessment form data
 * @param isPostAi - Whether this is a post-AI assessment
 * @returns Promise resolving to the created assessment ID
 * @throws {ApiError} When the submission fails
 */
async function submitAssessment(
  assessmentData: AssessmentFormData, 
  isPostAi: boolean
): Promise<number> {
  // Implementation
}
```

### Component Documentation
```vue
<script setup lang="ts">
/**
 * AssessmentForm - Handles both pre-AI and post-AI assessment input
 * 
 * @component
 * @example
 * <AssessmentForm 
 *   :case-data="currentCase"
 *   :is-post-ai="false"
 *   @submit="handleSubmit" />
 */

interface Props {
  caseData: CaseData;
  isPostAi?: boolean;
  readonly?: boolean;
}
</script>
```

---

## üéØ Key Takeaways

1. **Stay Updated**: Framework changes can break existing patterns
2. **Read Documentation**: Always check the specific version docs
3. **Type Safety**: Use TypeScript consistently for better DX
4. **Testing**: Invest in comprehensive test coverage early
5. **Performance**: Monitor bundle size and runtime performance
6. **Documentation**: Keep architectural decisions documented

These lessons learned can save significant development time and prevent common pitfalls in similar Vue 3 + modern tooling projects.
Be wary of tutorials/examples that may be using older versions with different APIs
Look at package repository issues for common problems others may have encountered
Consider locking versions in package.json if you need stability
6. Development Server Configuration
Pitfall: Port conflicts can occur when the default port is already in use.

Lessons learned:

Configure a fallback port strategy in your Vite config
Be explicit about port configuration in different environments
Update your Cypress configuration to match the development server port
7. Component Imports and Registration
Pitfall: PrimeVue components need to be explicitly imported in each component where they're used.

Lessons learned:

In Vue 3 with PrimeVue, you need to import each component individually
This is different from some other component libraries that globally register everything
This approach results in better tree-shaking but requires more imports
8. Style Scoping and Global Styles
Pitfall: Scoped styles in Vue components don't affect child components or imported library components.

Lessons learned:

Use :deep() selector to target nested components within scoped styles
Place global styles in App.vue or import a dedicated global CSS file
CSS variables provide a clean way to maintain consistent theming across components
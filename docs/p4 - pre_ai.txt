Create `src/pages/CasePage.vue` for the pre-AI assessment phase.

🎯 The page should:
- Use the case ID from the route param (`/case/:id`)
- Fetch case data from `/cases/{id}`
- Fetch case images from `/images/case/{id}`
- Fetch metadata from `/case_metadata/case/{id}`
- Fetch available management strategies from `/management_strategies/`

🖼 Display:
- Case images in a PrimeVue Carousel
- Metadata in a collapsible panel (gender, age, history)

📋 Add form inputs (use PrimeVue components):
1. **Top 3 Ranked Diagnoses**
   - Three PrimeVue InputText fields
   - Submit in rank order: 1 = top choice
2. **Confidence Score** (slider 1–5)
3. **Management Strategy**
   - PrimeVue Dropdown populated with `/management_strategies/`
   - Optional free-text field for additional notes
4. **Certainty Score** (slider 1–5)

✅ On “Next” button click:
- Submit `AssessmentCreate` to `/assessments/` with:
```js
{
  is_post_ai: false,
  user_id: <from store>,
  case_id: <from route>,
  assessable_image_score: <optional>,
  confidence_level_top1: <from slider>,
  management_confidence: <same as confidence>,
  certainty_level: <certainty slider>
}
Capture the assessment_id from response

Submit top 3 ranked diagnoses to /diagnoses/:

js
Copy
Edit
[
  { assessment_id, diagnosis_id: <lookup or mock>, rank: 1 },
  { assessment_id, diagnosis_id: <lookup or mock>, rank: 2 },
  { assessment_id, diagnosis_id: <lookup or mock>, rank: 3 }
]
(You can use hardcoded mock IDs until diagnosis terms are connected)

Submit management plan to /management_plans/:

js
Copy
Edit
{
  assessment_id,
  strategy_id: <from dropdown>,
  free_text: <optional notes>
}
📦 After submission:

Call caseStore.markCaseComplete(caseId)

Call caseStore.goToNextCase() and route to /case/:nextId

💡 Use PrimeVue form validation where appropriate.
💾 Save temporary inputs to localStorage in case of crash.